package com.lionido.dream_app

import android.os.Bundle
import android.view.View
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.chip.Chip
import com.google.android.material.chip.ChipGroup
import com.lionido.dream_app.adapter.DreamSymbolAdapter
import com.lionido.dream_app.analyzer.DreamAnalysis
import com.lionido.dream_app.model.Dream
import com.lionido.dream_app.model.DreamMood
import com.lionido.dream_app.model.DreamSymbol
import com.lionido.dream_app.model.DreamType
import com.lionido.dream_app.model.SymbolCategory
import com.lionido.dream_app.storage.DreamStorage
import java.text.SimpleDateFormat
import java.util.*

class DreamAnalysisActivity : AppCompatActivity() {

    private lateinit var dreamTitleText: TextView
    private lateinit var dreamDateText: TextView
    private lateinit var dreamMoodText: TextView
    private lateinit var dreamTypeText: TextView
    private lateinit var dreamContentText: TextView
    private lateinit var dreamInterpretationText: TextView
    private lateinit var emotionsChipGroup: ChipGroup
    private lateinit var themesChipGroup: ChipGroup
    private lateinit var tagsChipGroup: ChipGroup
    private lateinit var symbolsRecycler: RecyclerView

    private lateinit var symbolsAdapter: DreamSymbolAdapter
    private lateinit var dreamStorage: DreamStorage
    private var currentDream: Dream? = null
    private var currentAnalysis: DreamAnalysis? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_dream_analysis)

        dreamStorage = DreamStorage(this)

        initViews()
        setupRecyclerView()
        setupClickListeners()

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ intent –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä
        loadDreamData()
    }

    private fun initViews() {
        dreamTitleText = findViewById(R.id.dream_title)
        dreamDateText = findViewById(R.id.dream_date)
        dreamMoodText = findViewById(R.id.dream_mood)
        dreamTypeText = findViewById(R.id.dream_type)
        dreamContentText = findViewById(R.id.dream_content)
        dreamInterpretationText = findViewById(R.id.dream_interpretation)
        emotionsChipGroup = findViewById(R.id.emotions_chip_group)
        themesChipGroup = findViewById(R.id.themes_chip_group)
        tagsChipGroup = findViewById(R.id.tags_chip_group)
        symbolsRecycler = findViewById(R.id.symbols_recycler)
    }

    private fun setupRecyclerView() {
        symbolsAdapter = DreamSymbolAdapter()
        symbolsRecycler.apply {
            adapter = symbolsAdapter
            layoutManager = LinearLayoutManager(this@DreamAnalysisActivity)
        }
    }

    private fun setupClickListeners() {
        findViewById<View>(R.id.btn_back).setOnClickListener {
            finish()
        }

        findViewById<View>(R.id.btn_save).setOnClickListener {
            currentDream?.let { dream ->
                val success = dreamStorage.saveDream(dream)
                if (success) {
                    Toast.makeText(this, "–°–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", Toast.LENGTH_SHORT).show()
                    finish()
                } else {
                    Toast.makeText(this, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", Toast.LENGTH_SHORT).show()
                }
            }
        }

        findViewById<View>(R.id.btn_edit_tags).setOnClickListener {
            showTagSelectionDialog()
        }
    }

    private fun loadDreamData() {
        // –ü–æ–ª—É—á–∞–µ–º dreamId –∏–∑ intent, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
        val dreamId = intent.getStringExtra("dreamId")

        if (dreamId != null) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–æ–Ω
            currentDream = dreamStorage.getDreamById(dreamId)
            currentAnalysis = null // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∂–µ

            currentDream?.let { dream ->
                displayDreamAnalysis(dream, createAnalysisFromDream(dream))
            }
        } else {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            val sampleDream = createSampleDream()
            val sampleAnalysis = createSampleAnalysis()

            currentDream = sampleDream
            currentAnalysis = sampleAnalysis

            displayDreamAnalysis(sampleDream, sampleAnalysis)
        }
    }

    private fun createAnalysisFromDream(dream: Dream): DreamAnalysis {
        return DreamAnalysis(
            symbols = dream.symbols,
            emotions = dream.emotions,
            mood = dream.mood,
            dreamType = if (dream.lucidDream) DreamType.LUCID else DreamType.ORDINARY,
            interpretation = dream.interpretation,
            tags = dream.tags,
            keyThemes = extractKeyThemesFromSymbols(dream.symbols)
        )
    }

    private fun extractKeyThemesFromSymbols(symbols: List<DreamSymbol>): List<String> {
        return symbols.groupBy { it.category }
            .entries
            .sortedByDescending { it.value.size }
            .take(3)
            .map { getCategoryDisplayName(it.key) }
    }

    private fun getCategoryDisplayName(category: SymbolCategory): String {
        return when (category) {
            SymbolCategory.PEOPLE -> "–õ—é–¥–∏"
            SymbolCategory.ANIMALS -> "–ñ–∏–≤–æ—Ç–Ω—ã–µ"
            SymbolCategory.NATURE -> "–ü—Ä–∏—Ä–æ–¥–∞"
            SymbolCategory.OBJECTS -> "–ü—Ä–µ–¥–º–µ—Ç—ã"
            SymbolCategory.PLACES -> "–ú–µ—Å—Ç–∞"
            SymbolCategory.ACTIONS -> "–î–µ–π—Å—Ç–≤–∏—è"
            SymbolCategory.EMOTIONS -> "–≠–º–æ—Ü–∏–∏"
            SymbolCategory.COLORS -> "–¶–≤–µ—Ç–∞"
            SymbolCategory.NUMBERS -> "–ß–∏—Å–ª–∞"
            SymbolCategory.WEATHER -> "–ü–æ–≥–æ–¥–∞"
            SymbolCategory.BUILDINGS -> "–ó–¥–∞–Ω–∏—è"
            SymbolCategory.VEHICLES -> "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
            SymbolCategory.FOOD -> "–ï–¥–∞"
            SymbolCategory.CLOTHING -> "–û–¥–µ–∂–¥–∞"
            SymbolCategory.OTHER -> "–î—Ä—É–≥–æ–µ"
        }
    }

    private fun displayDreamAnalysis(dream: Dream, analysis: DreamAnalysis) {
        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        dreamTitleText.text = dream.title.ifEmpty { "–ú–æ–π —Å–æ–Ω" }

        val dateFormat = SimpleDateFormat("d MMMM yyyy, HH:mm", Locale.getDefault())
        dreamDateText.text = dateFormat.format(dream.dateCreated)

        dreamMoodText.text = "${getMoodEmoji(dream.mood)} ${getMoodText(dream.mood)}"
        dreamTypeText.text = "–¢–∏–ø: ${getDreamTypeText(analysis.dreamType)}"

        // –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–Ω–∞
        dreamContentText.text = dream.content.ifEmpty { "–û–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" }

        // –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
        dreamInterpretationText.text = dream.interpretation.ifEmpty { "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }

        // –≠–º–æ—Ü–∏–∏
        displayEmotions(analysis.emotions)

        // –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã
        displayKeyThemes(analysis.keyThemes)

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏
        displayTags(dream.tags)

        // –°–∏–º–≤–æ–ª—ã
        symbolsAdapter.updateSymbols(dream.symbols)

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (dream.symbols.isEmpty()) {
            findViewById<View>(R.id.symbols_card).visibility = View.GONE
        }
    }

    private fun displayEmotions(emotions: List<String>) {
        emotionsChipGroup.removeAllViews()

        emotions.forEach { emotion ->
            val chip = Chip(this).apply {
                text = emotion.replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() }
                isClickable = false
                setChipBackgroundColorResource(R.color.accent_color)
                setTextColor(resources.getColor(R.color.white, this@DreamAnalysisActivity.theme))
            }
            emotionsChipGroup.addView(chip)
        }

        if (emotions.isEmpty()) {
            val chip = Chip(this).apply {
                text = "–ù–µ—Ç —ç–º–æ—Ü–∏–π"
                isClickable = false
                setChipBackgroundColorResource(R.color.surface_color)
                setTextColor(
                    resources.getColor(
                        R.color.secondary_text,
                        this@DreamAnalysisActivity.theme
                    )
                )
            }
            emotionsChipGroup.addView(chip)
        }
    }

    private fun displayKeyThemes(themes: List<String>) {
        themesChipGroup.removeAllViews()

        themes.forEach { theme ->
            val chip = Chip(this).apply {
                text = theme
                isClickable = false
                setChipBackgroundColorResource(R.color.primary_color)
                setTextColor(resources.getColor(R.color.white, this@DreamAnalysisActivity.theme))
            }
            themesChipGroup.addView(chip)
        }

        if (themes.isEmpty()) {
            val chip = Chip(this).apply {
                text = "–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º"
                isClickable = false
                setChipBackgroundColorResource(R.color.surface_color)
                setTextColor(
                    resources.getColor(
                        R.color.secondary_text,
                        this@DreamAnalysisActivity.theme
                    )
                )
            }
            themesChipGroup.addView(chip)
        }
    }

    private fun getMoodEmoji(mood: DreamMood): String {
        return when (mood) {
            DreamMood.VERY_POSITIVE -> "üòÑ"
            DreamMood.POSITIVE -> "üòä"
            DreamMood.NEUTRAL -> "üòê"
            DreamMood.NEGATIVE -> "üòî"
            DreamMood.VERY_NEGATIVE -> "üò∞"
            DreamMood.MIXED -> "ü§î"
        }
    }

    private fun getMoodText(mood: DreamMood): String {
        return when (mood) {
            DreamMood.VERY_POSITIVE -> "–û—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ"
            DreamMood.POSITIVE -> "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ"
            DreamMood.NEUTRAL -> "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"
            DreamMood.NEGATIVE -> "–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ"
            DreamMood.VERY_NEGATIVE -> "–û—á–µ–Ω—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ"
            DreamMood.MIXED -> "–°–º–µ—à–∞–Ω–Ω–æ–µ"
        }
    }

    private fun getDreamTypeText(type: DreamType): String {
        return when (type) {
            DreamType.ORDINARY -> "–û–±—ã—á–Ω—ã–π —Å–æ–Ω"
            DreamType.LUCID -> "–û—Å–æ–∑–Ω–∞–Ω–Ω—ã–π —Å–æ–Ω"
            DreamType.NIGHTMARE -> "–ö–æ—à–º–∞—Ä"
            DreamType.RECURRING -> "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–æ–Ω"
            DreamType.PROPHETIC -> "–í–µ—â–∏–π —Å–æ–Ω"
            DreamType.HEALING -> "–ò—Å—Ü–µ–ª—è—é—â–∏–π —Å–æ–Ω"
        }
    }

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    private fun createSampleDream(): Dream {
        val sampleSymbols = listOf(
            DreamSymbol("–ü–æ–ª–µ—Ç", "–°–≤–æ–±–æ–¥–∞, –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", SymbolCategory.ACTIONS, 1),
            DreamSymbol("–ü—Ç–∏—Ü–∞", "–°–≤–æ–±–æ–¥–∞, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å, —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –≤—ã—Å—à–µ–º—É", SymbolCategory.ANIMALS, 1),
            DreamSymbol("–°–æ–ª–Ω—Ü–µ", "–°–æ–∑–Ω–∞–Ω–∏–µ, —ç–Ω–µ—Ä–≥–∏—è, –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞", SymbolCategory.NATURE, 1),
            DreamSymbol("–ì–æ—Ä–æ–¥", "–û–±—â–µ—Å—Ç–≤–æ, —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è, —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏", SymbolCategory.PLACES, 1)
        )

        return Dream(
            title = "–ü–æ–ª–µ—Ç –Ω–∞–¥ –≥–æ—Ä–æ–¥–æ–º",
            content = "–ú–Ω–µ —Å–Ω–∏–ª–æ—Å—å, —á—Ç–æ —è –ª–µ—Ç–∞—é –Ω–∞–¥ –±–æ–ª—å—à–∏–º –≥–æ—Ä–æ–¥–æ–º. –í–Ω–∏–∑—É –±—ã–ª–∏ –≤—ã—Å–æ–∫–∏–µ –∑–¥–∞–Ω–∏—è, —Å–≤–µ—Ç–∏–ª–∏—Å—å –æ–∫–Ω–∞. –Ø —á—É–≤—Å—Ç–≤–æ–≤–∞–ª —Å–≤–æ–±–æ–¥—É –∏ —Ä–∞–¥–æ—Å—Ç—å. –†—è–¥–æ–º —Å–æ –º–Ω–æ–π –ª–µ—Ç–µ–ª–∞ –±–µ–ª–∞—è –ø—Ç–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞ –º–Ω–µ –¥–æ—Ä–æ–≥—É –∫ —è—Ä–∫–æ–º—É —Å–æ–ª–Ω—Ü—É.",
            dateCreated = Date(),
            emotions = listOf("—Ä–∞–¥–æ—Å—Ç—å", "—Å–≤–æ–±–æ–¥–∞", "–≤–æ—Å—Ç–æ—Ä–≥"),
            symbols = sampleSymbols,
            interpretation = "–ü–æ–ª–µ—Ç –≤–æ —Å–Ω–µ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Å–≤–æ–±–æ–¥–µ –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –ë–µ–ª–∞—è –ø—Ç–∏—Ü–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥—É—Ö–æ–≤–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, –∞ —Å–æ–ª–Ω—Ü–µ - —Ü–µ–ª—å –∏–ª–∏ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å. –ì–æ—Ä–æ–¥ –≤–Ω–∏–∑—É –º–æ–∂–µ—Ç –æ—Ç—Ä–∞–∂–∞—Ç—å –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–±–æ—Ç—ã, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è.",
            tags = listOf("–ø–æ–ª–µ—Ç", "–≥–æ—Ä–æ–¥", "—Å–≤–æ–±–æ–¥–∞", "–ø—Ç–∏—Ü–∞"),
            mood = DreamMood.POSITIVE,
            lucidDream = false
        )
    }

    private fun createSampleAnalysis(): DreamAnalysis {
        return DreamAnalysis(
            symbols = listOf(
                DreamSymbol("–ü–æ–ª–µ—Ç", "–°–≤–æ–±–æ–¥–∞, –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", SymbolCategory.ACTIONS, 1),
                DreamSymbol("–ü—Ç–∏—Ü–∞", "–°–≤–æ–±–æ–¥–∞, –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å, —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –≤—ã—Å—à–µ–º—É", SymbolCategory.ANIMALS, 1),
                DreamSymbol("–°–æ–ª–Ω—Ü–µ", "–°–æ–∑–Ω–∞–Ω–∏–µ, —ç–Ω–µ—Ä–≥–∏—è, –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞", SymbolCategory.NATURE, 1),
                DreamSymbol("–ì–æ—Ä–æ–¥", "–û–±—â–µ—Å—Ç–≤–æ, —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è, —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏", SymbolCategory.PLACES, 1)
            ),
            emotions = listOf("—Ä–∞–¥–æ—Å—Ç—å", "—Å–≤–æ–±–æ–¥–∞", "–≤–æ—Å—Ç–æ—Ä–≥"),
            mood = DreamMood.POSITIVE,
            dreamType = DreamType.ORDINARY,
            interpretation = "–í–∞—à —Å–æ–Ω –Ω–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π –∏ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –≤—ã—Å—à–∏—Ö —Ü–µ–ª–µ–π.",
            tags = listOf("–ø–æ–ª–µ—Ç", "–≥–æ—Ä–æ–¥", "—Å–≤–æ–±–æ–¥–∞", "–ø—Ç–∏—Ü–∞"),
            keyThemes = listOf("–°–≤–æ–±–æ–¥–∞", "–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å", "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        )
    }

    private fun displayTags(tags: List<String>) {
        tagsChipGroup.removeAllViews()

        if (tags.isEmpty()) {
            val emptyChip = Chip(this)
            emptyChip.text = "–¢–µ–≥–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
            emptyChip.isEnabled = false
            emptyChip.setTextColor(getColor(android.R.color.darker_gray))
            tagsChipGroup.addView(emptyChip)
            return
        }

        tags.forEach { tag ->
            val chip = Chip(this)
            chip.text = tag
            chip.isClickable = false
            chip.chipBackgroundColor = android.content.res.ColorStateList.valueOf(
                android.graphics.Color.parseColor(TagManager.getTagColor(this, tag))
            )
            chip.setTextColor(android.graphics.Color.WHITE)
            tagsChipGroup.addView(chip)
        }
    }

    private fun showTagSelectionDialog() {
        val currentDream = currentDream ?: return
        
        val dialog = TagSelectionDialog.newInstance(
            currentTags = currentDream.tags,
            dreamContent = currentDream.content,
            listener = object : TagSelectionDialog.TagSelectionListener {
                override fun onTagsSelected(selectedTags: List<String>) {
                    updateDreamTags(selectedTags)
                }
            }
        )
        
        dialog.show(supportFragmentManager, "TagSelectionDialog")
    }

    private fun updateDreamTags(newTags: List<String>) {
        currentDream = currentDream?.copy(tags = newTags)
        displayTags(newTags)
    }
}